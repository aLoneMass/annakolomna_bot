from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from bot.states.registration import RegistrationState
from bot.services.events import get_all_events
import os
import datetime
from config import CHECKS_DIR, ADMINS

router = Router()

# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(F.data.startswith("signup_"))
async def handle_signup(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1])
    events = get_all_events()

    if index >= len(events):
        await callback.answer("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    event = events[index]
    await state.update_data(event_index=index)

    await callback.message.answer("üë∂ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏:")
    await state.set_state(RegistrationState.entering_child_name)
    await callback.answer()


# 2. –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –∞–ª–ª–µ—Ä–≥–∏—è—Ö
@router.message(RegistrationState.entering_child_name)
async def handle_child_name(message: Message, state: FSMContext):
    child_name = message.text.strip()
    await state.update_data(child_name=child_name)

    await message.answer("‚ùó –ï—Å—Ç—å –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ (–∏–ª–∏ –¥–µ—Ç–µ–π) –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.")
    await state.set_state(RegistrationState.entering_allergy_info)


# 3. –í–≤–æ–¥ –∞–ª–ª–µ—Ä–≥–∏–π ‚Üí –≤—ã–¥–∞—ë–º –æ–ø–ª–∞—Ç—É –∏ QR
@router.message(RegistrationState.entering_allergy_info)
async def handle_allergy_info(message: Message, state: FSMContext):
    allergy_info = message.text.strip()
    await state.update_data(allergy_info=allergy_info)

    data = await state.get_data()
    event_index = data.get("event_index")
    events = get_all_events()
    event = events[event_index]

    payment_link = event[5]
    qr_path = event[6]

    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f"<a href=\"{payment_link}\">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n"
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    qr_file = FSInputFile(qr_path)
    await message.answer_photo(
        photo=qr_file,
        caption=caption,
        parse_mode="HTML"
    )

    await state.set_state(RegistrationState.waiting_for_payment_check)
    
@router.message(RegistrationState.waiting_for_payment_check)
async def handle_payment_check(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_id = photo.file_id
    tg_user = message.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –Ω–∞ –¥–∏—Å–∫
    now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{tg_user.id}_{now_str}.jpg"
    full_path = os.path.join(CHECKS_DIR, filename)
    await photo.download(destination=full_path)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    child_name = data.get("child_name")
    comment = data.get("comment")
    event_index = data.get("event_index")

    from bot.services.events import get_all_events
    events = get_all_events()
    event = events[event_index]
    event_id = event[0]
    event_date = event[3]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    import sqlite3
    from config import DB_PATH
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # users
        cur.execute("INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)", (
            tg_user.id,
            tg_user.username,
            tg_user.full_name
        ))

        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (tg_user.id,))
        user_id = cur.fetchone()[0]

        # registrations
        cur.execute("""
            INSERT INTO registrations (user_id, event_id, child_name, comment)
            VALUES (?, ?, ?, ?)
        """, (user_id, event_id, child_name, comment))

        registration_id = cur.lastrowid

        # payments
        cur.execute("""
            INSERT INTO payments (registration_id, amount, check_path, created_at)
            VALUES (?, ?, ?, ?)
        """, (registration_id, "500", full_path, datetime.datetime.now().isoformat()))

        conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    for admin_id in ADMINS:
        await message.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ—Ç @{tg_user.username} (ID: {tg_user.id})\n"
                f"üßí –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}\n"
                f"üìÖ –î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_date}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            )
        )
        await message.bot.send_photo(chat_id=admin_id, photo=FSInputFile(full_path))

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ! üß°")
    await state.clear()
