from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.states.registration import RegistrationState
from bot.services.events import get_all_events


import os
import datetime
import sys
from pathlib import Path
sys.path.append(str((Path(__file__).resolve().parent.parent)))
from config import CHECKS_DIR, ADMINS
from config import DB_PATH

router = Router()

# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(lambda c: c.data and c.data.startswith("signup_"))
async def handle_register(callback: CallbackQuery, state: FSMContext):
    event_index = int(callback.data.split("_")[1])
    user = callback.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è
    await state.update_data(event_index=event_index)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ telegram_id
    import sqlite3
    from config import DB_PATH

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT r.child_name FROM registrations r
            JOIN users u ON u.id = r.user_id
            WHERE u.telegram_id = ?
            ORDER BY r.id DESC LIMIT 1
        """, (user.id,))
        row = cur.fetchone()

    if row:
        child_name = row[0]
        await state.update_data(child_name=child_name)
        await callback.message.answer(
            f"üëß –†–∞–Ω–µ–µ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ <b>{child_name}</b>.\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_child"),
                 InlineKeyboardButton(text="‚ùå –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data="enter_new_child")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationState.confirming_child)
    else:
        await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å:")
        await state.set_state(RegistrationState.entering_child_name)

@router.callback_query(F.data == "confirm_child")
async def confirm_existing_child(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –ø—Ä–æ—à–ª–æ–π –∑–∞–ø–∏—Å–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    tg_user = callback.from_user

    import sqlite3
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT r.comment FROM registrations r
            JOIN users u ON u.id = r.user_id
            WHERE u.telegram_id = ?
            ORDER BY r.id DESC LIMIT 1
        """, (tg_user.id,))
        row = cur.fetchone()

    if row and row[0]:
        comment = row[0]
        await state.update_data(comment=comment)

        await callback.message.answer(
            f"üìù –†–∞–Ω–µ–µ –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n<code>{comment}</code>\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="comment_confirm")],
                [InlineKeyboardButton(text="‚ùå –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="comment_reenter")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationState.confirming_comment)
    else:
        await callback.message.answer("üìù –£–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞.")
        await state.set_state(RegistrationState.entering_allergy_info)

    await callback.answer()



@router.callback_query(F.data == "enter_new_child")
async def enter_new_child(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(RegistrationState.entering_child_name)
    await callback.answer()


# 2. –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –∞–ª–ª–µ—Ä–≥–∏—è—Ö
@router.message(RegistrationState.entering_child_name)
async def handle_child_name(message: Message, state: FSMContext):
    child_name = message.text.strip()
    await state.update_data(child_name=child_name)

    await message.answer("‚ùó –ï—Å—Ç—å –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ (–∏–ª–∏ –¥–µ—Ç–µ–π) –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.")
    await state.set_state(RegistrationState.entering_allergy_info)


# 3. –í–≤–æ–¥ –∞–ª–ª–µ—Ä–≥–∏–π ‚Üí –≤—ã–¥–∞—ë–º –æ–ø–ª–∞—Ç—É –∏ QR
@router.message(RegistrationState.entering_allergy_info)
async def handle_allergy_info(message: Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)

    data = await state.get_data()
    event_index = data.get("event_index")
    events = get_all_events()
    event = events[event_index]

    payment_link = event[6]
    qr_path = event[7]


    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f'<a href="{payment_link}">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n'
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    print(f"[DEBUG] qr_path = {qr_path}")

    qr_file = FSInputFile(qr_path)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—á—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])

    await message.answer_photo(
        photo=qr_file,
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RegistrationState.waiting_for_payment_check)

@router.callback_query(F.data == "pay_cash")
async def handle_cash_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å! \n –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ.")
    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "comment_confirm")
async def confirm_old_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    comment = data.get("comment")

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    
    # –ü–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –µ–≥–æ –≤–≤—ë–ª
    await handle_allergy_info(
        Message.model_construct(
            message_id=callback.message.message_id,
            chat=callback.message.chat,
            from_user=callback.from_user,
            text=comment
        ),
        state
    )
    await callback.answer()


@router.callback_query(F.data == "comment_reenter")
async def reenter_comment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    await state.set_state(RegistrationState.entering_allergy_info)
    await callback.answer()


    
@router.message(RegistrationState.waiting_for_payment_check)
async def handle_payment_check(message: Message, state: FSMContext):
    tg_user = message.from_user

    file = None
    file_ext = None

    if message.photo:
        file = message.photo[-1]
        file_ext = "jpg"
    elif message.document:
        if message.document.mime_type == "application/pdf":
            file = message.document
            file_ext = "pdf"

    if not file:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{tg_user.id}_{now_str}.{file_ext}"
    full_path = os.path.join(CHECKS_DIR, filename)

    await message.bot.download(file.file_id, destination=full_path)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    child_name = data.get("child_name")
    comment = data.get("comment")
    event_index = data.get("event_index")

    events = get_all_events()
    event = events[event_index]
    event_id = event[0]
    event_date = event[3]

    import sqlite3
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)", (
            tg_user.id, tg_user.username, tg_user.full_name
        ))
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (tg_user.id,))
        user_id = cur.fetchone()[0]

        cur.execute("""
            INSERT INTO registrations (user_id, event_id, child_name, comment)
            VALUES (?, ?, ?, ?)
        """, (user_id, event_id, child_name, comment))

        registration_id = cur.lastrowid

        cur.execute("""
            INSERT INTO payments (registration_id, amount, check_path, created_at)
            VALUES (?, ?, ?, ?)
        """, (registration_id, "500", full_path, datetime.datetime.now().isoformat()))

        conn.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    for admin_id in ADMINS:
        await message.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç @{tg_user.username} (ID: {tg_user.id})\n"
                f"üëß –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}\n"
                f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_date}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
            )
        )
        if file_ext == "jpg":
            await message.bot.send_photo(chat_id=admin_id, photo=FSInputFile(full_path))
        elif file_ext == "pdf":
            await message.bot.send_document(chat_id=admin_id, document=FSInputFile(full_path))

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ! üß°")
    await state.clear()

