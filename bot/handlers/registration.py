from aiogram import Bot
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from bot.states.registration import RegistrationState
from bot.services.events import get_all_events, get_event_by_id
import os
import re
import sqlite3
import datetime
from config import CHECKS_DIR, ADMINS, DB_PATH
from config import ADMINS  # —Å–ø–∏—Å–æ–∫ ID –∏–∑ .env


router = Router()

#–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(F.data.startswith("signup_event:"))
#async def handle_signup_event(user_id: int, event_id: int, state: FSMContext):
async def handle_signup_event(callback: CallbackQuery, state: FSMContext):  #–í –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π callback –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ event_id –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è"
    print (f'[DEBUG signup] –ü–æ–ª—å–∑–æ–≤–∞–µ–ª—å –Ω–∞–∂–∞–ª –∑–∞–ø–∏—Å–∞—Ç—å—Å—è. –≤—ã–∑–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ signup_event: {F.data.startswith} and bcallback: {callback.data}')
    event_id = int(callback.data.split(":")[1])                             #–í–æ—Ç —Ç—É—Ç –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç—Å—è —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–ª–±–µ–∫.–¥–∞—Ç–∞ –≤ —ç–≤–µ–Ω—Ç_–∏–¥
    user_id = callback.from_user.id
    print (f'[DEBUG signup]   callback.from_user.id: {callback.from_user}')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º event_id –≤ state
    await state.update_data(event_id=event_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT p.payment_type
            FROM registrations r
            JOIN users u ON r.user_id = u.id
            LEFT JOIN payments p ON r.id = p.registration_id
            WHERE u.telegram_id = ? AND r.event_id = ?;

        """, (user_id, event_id))
        reg = cur.fetchone()
        print(f'[DEBUG signup] –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: reg: {reg}')

        if reg:
            payment_type = reg[0]
            print(f'[DEBUG signup] payment_type: {payment_type}')
            if payment_type == "–Ω–∞–ª–∏—á–Ω—ã–º–∏":
                print(f'[DEBUG signup] –ø—Ä–æ–≤–∞–ª–∏–ª—Å—å –≤ if "–Ω–∞–ª–∏—á–Ω—ã–º–∏" ')
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data="pay_online")],
                    # [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_registration")]
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
                ])
                await callback.message.answer(                
                    "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏.\n"
                    "–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω?",
                    reply_markup=keyboard
                )
            elif payment_type == "–æ–ø–ª–∞—á–µ–Ω–æ":
                print(f'[DEBUG signup] –ø—Ä–æ–≤–∞–ª–∏–ª—Å—å –≤ else "–æ–ø–ª–∞—á–µ–Ω–æ"')
                await callback.message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.")
            else:
                print(f'[DEBUG signup] –ø—Ä–æ–≤–∞–ª–∏–ª—Å—å –≤ if "–Ω–∞–ª–∏—á–Ω—ã–º–∏" ')
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data="pay_online")],
                    [InlineKeyboardButton(text="üí∂ –û–ø–ª–∞—á—É –Ω–∞ –º–µ—Å—Ç–µ", callback_data="pay_cash")]
                    [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
                ])
                await callback.message.answer(                
                    "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –Ω–æ –æ–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞.\n"
                    "–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏?",
                    reply_markup=keyboard
                )
            await callback.answer()
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫
    cur = conn.cursor()
    cur.execute("""
        SELECT child_name, comment, birth_date
        FROM children
        WHERE user_id = ?
        LIMIT 1
    """, (user_id,))
    child = cur.fetchone()
    print(f'[DEBUG signup] –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–±–µ–Ω–∫–∞: {child}')

    if child:
        child_name, comment, birth_date = child
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            child_name=child_name,
            comment=comment,
            birth_date=birth_date
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_child_info")],
            [InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="new_child_info")]
        ])

        await callback.message.answer(
            f"üë∂ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–±—ë–Ω–∫–∞:\n"
            f"–ò–º—è: {hbold(child_name)}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äì'}\n"
            f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–±—ë–Ω–∫–µ –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    
    await state.set_state(RegistrationState.entering_child_name)

    await callback.answer()


#–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ—é—â–∏—Ö—Å—è –¥–∞–Ω–Ω—ã—Ö
@router.callback_query(F.data == "confirm_child_info")
async def handle_confirm_child_info(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —ç—Ç–∞–ø—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR-–∫–æ–¥–æ–º, –∫–Ω–æ–ø–∫–æ–π "–û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏" –∏ —Ç.–¥.

    # –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–¥–∞–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É:
    await state.set_state(RegistrationState.checking_payment)

    await callback.answer()
    await handle_child_birth_date(message=callback.message, state=state)




# -- –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --
def get_or_create_user(telegram_id, username=None, full_name=None):
    print(f"[DEBUG get_or_create_user] –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("INSERT INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)",
                    (telegram_id, username or '', full_name or ''))
        return cur.lastrowid

# -- –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ --
def get_or_create_child(user_id, child_name, comment, birth_date):
    print(f"[DEBUG get_or_create_child] user_id: {user_id}, child_name: {child_name}, comment: {comment}, birth_date:{birth_date}")
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT id FROM children
            WHERE user_id = ? AND child_name = ?
        """, (user_id, child_name)
        )
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("""
            INSERT INTO children (user_id, child_name, comment, birth_date)
            VALUES (?, ?, ?, ?)
        """, (user_id, child_name, comment, birth_date ))
        return cur.lastrowid



#1 -- –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ --
@router.message(RegistrationState.entering_child_name)
async def handle_child_name(message: Message, state: FSMContext):
    print(f"[DEBUG child_name] message: {Message}, state: {FSMContext}")
    await state.update_data(child_name=message.text.strip())
    await message.answer("‚ùó –ï—Å—Ç—å –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?")
    await state.set_state(RegistrationState.entering_allergy_info)

#2 -- –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è --
@router.message(RegistrationState.entering_allergy_info)
async def handle_allergy_info(message: Message, state: FSMContext):
    print(f"[DEBUG coment_step] message: {Message}, state: {FSMContext}")
    await state.update_data(comment=message.text.strip())
    await message.answer("üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(RegistrationState.entering_birth_date)

#3 -- –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ --
@router.message(RegistrationState.entering_birth_date)
async def handle_child_birth_date(message: Message, state: FSMContext):
    data = await state.get_data()
    print(f"[DEBUG birth_date] –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏: {data}")
    event_id = data.get("event_id")      # –ü–æ–ª—É—á–∞–µ–º event_id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    print(f"[DEBUG birth_date] event_id: {event_id}")

    birth_date = message.text.strip()   #–í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é birh_date –∑–∞–ø–æ–º–Ω–∏–º –≤–≤–µ–¥–µ–Ω–æ–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    if not re.match(r"^\d{2}\.\d{2}\.\d{2}(\d{2})?$", birth_date):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    await state.update_data(birth_date=birth_date)
    data = await state.get_data()
    print(f"[DEBUG birth_date] –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {data}")
    user = message.from_user
    
    user_id = get_or_create_user(user.id, user.username, user.full_name)
    await state.update_data(user_id=user_id)            # <-- –¥–æ–±–∞–≤—å —ç—Ç–æ, –≤–∞–∂–Ω–æ!
    print(f"[DEBUG birth_date] –¥–∞–Ω–Ω—ã–µ –≤ user_id: {user_id}")
    child_id = get_or_create_child(user_id, data['child_name'], data['comment'], data['birth_date'])
    await state.update_data(child_id=child_id)          # <-- –¥–æ–±–∞–≤—å —ç—Ç–æ, –≤–∞–∂–Ω–æ!
    print(f"[DEBUG birth_date] –¥–∞–Ω–Ω—ã–µ –≤ child_id: {child_id}")

    
    #–¢—É—Ç –≤–æ–∑–º–æ–∂–Ω—ã –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –ª–∏–±–æ –≤—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –ª–∏–±–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏.
    event = get_event_by_id(data['event_id'])
    if not event:
        await message.answer("–û—à–∏–±–∫–∞: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    print(f"[DEBUG birth_date] event: {event}")
    (event_id, title, description, location, photo_path, qr_file, payment_link, price, event_date, event_time) = event

    print(f"[DEBUG birth_date] –¥–∞–Ω–Ω—ã–µ –≤ event: {event}")

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO registrations (user_id, child_id, event_id) VALUES (?, ?, ?)
        """, (user_id, child_id, event_id))
        registration_id = cur.lastrowid
    await state.update_data(registration_id=registration_id)    # <-- —Å–æ—Ö—Ä–∞–Ω—è–µ–º registration_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f'<a href="{payment_link}">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n'
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    #qr_file = FSInputFile(qr_path)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—á—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])

    #await message.answer_photo(photo=qr_file, caption=caption, parse_mode="HTML", reply_markup=keyboard)
    if qr_file:
        await message.answer_photo(
            photo=qr_file,
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            text=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )

    await state.update_data(
        event_id=event_id,
        title=title,
        description=description,
        location=location,
        photo_path=photo_path,
        qr_path=qr_path,
        payment_link=payment_link,
        price=price,
        event_date=event_date,
        event_time=event_time
    )
    await state.set_state(RegistrationState.notify_admins_about_registration) #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞



# -- –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ --
@router.callback_query(F.data == "pay_cash")
async def handle_cash_payment(callback: CallbackQuery, state: FSMContext):
    print(f"[DEBUG pay_cash] –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏")
    data = await state.get_data()
    user = callback.from_user
    print(f"[DEBUG pay_cash] user: {user}")

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""INSERT INTO payments (registration_id, user_id, payment_type, check_path) VALUES (?, ?, ?, ?)""",
            (data['registration_id'], data['user_id'], "–Ω–∞–ª–∏—á–Ω—ã–º–∏", "CASH"))
        
    await state.update_data(payment_type="–Ω–∞–ª–∏—á–Ω—ã–º–∏")  # –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö


    #–≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    print(f'[DEBUG cash_payment] admin notification. data:{data}')

    await notify_admins_about_registration(
        bot=callback.message.bot,
        admins=ADMINS,
        parent_name=callback.from_user.full_name,
        username=callback.from_user.username,
        child_name=data["child_name"],
        birth_date=data["birth_date"],
        comment=data["comment"],
        event_title=data["title"],
        event_date=data["event_date"],
        event_time=data["event_time"],
    )

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await callback.answer()
    await state.set_state(RegistrationState.waiting_for_payment_check) #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.clear()




# -- –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ --
@router.message(RegistrationState.waiting_for_payment_check)
async def handle_payment_check(message: Message, state: FSMContext):
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞: message:{Message}, state: {FSMContext}")
    tg_user = message.from_user
    file = message.photo[-1] if message.photo else message.document
    ext = "jpg" if message.photo else "pdf"

    if not file:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{tg_user.id}_{now_str}.{ext}"
    full_path = os.path.join(CHECKS_DIR, filename)

    await message.bot.download(file.file_id, destination=full_path)
    data = await state.get_data()

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO payments (registration_id, user_id, payment_type, check_path) VALUES (?, ?, ?, ?)",
                    (data['registration_id'], data['user_id'], "–æ–Ω–ª–∞–π–Ω", full_path))
    await state.update_data(payment_type="–æ–Ω–ª–∞–π–Ω", check_path=full_path)    

    #–≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    await notify_admins_about_registration(
        bot=message.bot,
        admins=ADMINS,
        parent_name=message.from_user.full_name,
        username=message.from_user.username,
        child_name=data["child_name"],
        birth_date=data["birth_date"],
        comment=data["comment"],
        event_title=data["event_title"],
        event_date=data["event_date"],
        event_time=data["event_time"],
    )


    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ!")
    await state.set_state(RegistrationState.notify_admins_about_registration) #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.clear()
    

#–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def notify_admins_about_registration(
    bot: Bot,
    admins: list[int],
    parent_name: str,
    username: str | None,
    child_name: str,
    birth_date: str,
    comment: str,
    event_title: str,
    event_date: str,
    event_time: str
):
    #data = await state.get_data()
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    """
    text = (
        f"üì¢ {hbold('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!')}\n\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
        f"üë§ –õ–æ–≥–∏–Ω: {username}\n"
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_name}\n"
        f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äì'}\n\n"
        f"üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {event_title}\n"
        f"üìÖ –î–∞—Ç–∞: {event_date}\n"
        f"üïí –í—Ä–µ–º—è: {event_time}"
    )

    for admin_id in admins:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")












