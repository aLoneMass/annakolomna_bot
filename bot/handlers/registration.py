import sqlite3
from aiogram import Bot
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold
from aiogram.fsm.context import FSMContext
from bot.states.registration import RegistrationState
from bot.services.events import get_all_events
import os
import re
import datetime
from config import CHECKS_DIR, ADMINS, DB_PATH
from bot.utils.notifications import notify_admins_about_registration
from config import ADMINS  # —Å–ø–∏—Å–æ–∫ ID –∏–∑ .env

router = Router()

# -- –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è --
def get_or_create_user(telegram_id, username=None, full_name=None):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("INSERT INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)",
                    (telegram_id, username or '', full_name or ''))
        return cur.lastrowid

# -- –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–±–µ–Ω–∫–∞ --
def get_or_create_child(user_id, child_name, comment, birth_date):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT id FROM children
            WHERE user_id = ? AND child_name = ? AND comment = ? AND birth_date = ?
        """, (user_id, child_name, comment, birth_date))
        row = cur.fetchone()
        if row:
            return row[0]
        cur.execute("""
            INSERT INTO children (user_id, child_name, comment, birth_date)
            VALUES (?, ?, ?, ?)
        """, (user_id, child_name, comment, birth_date ))
        return cur.lastrowid

# -- –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ --
@router.callback_query(lambda c: c.data and c.data.startswith("signup_"))
async def handle_register(callback: CallbackQuery, state: FSMContext):
    event_index = int(callback.data.split("_")[1])
    await state.update_data(event_index=event_index)
    await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(RegistrationState.entering_child_name)
    await callback.answer()

# -- –ò–º—è —Ä–µ–±—ë–Ω–∫–∞ --
@router.message(RegistrationState.entering_child_name)
async def handle_child_name(message: Message, state: FSMContext):
    await state.update_data(child_name=message.text.strip())
    await message.answer("‚ùó –ï—Å—Ç—å –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è?")
    await state.set_state(RegistrationState.entering_allergy_info)

# -- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π --
@router.message(RegistrationState.entering_allergy_info)
async def handle_allergy_info(message: Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    await message.answer("üéÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(RegistrationState.entering_birth_date)

# -- –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞ --
@router.message(RegistrationState.entering_birth_date)
async def handle_child_birth_date(message: Message, state: FSMContext):
    birth_date = message.text.strip()

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", birth_date):
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
        return


    await state.update_data(birth_date=birth_date)
    data = await state.get_data()
    user = message.from_user
    user_id = get_or_create_user(user.id, user.username, user.full_name)
    child_id = get_or_create_child(user_id, data['child_name'], data['comment'], data['birth_date'])

    event = get_all_events()[data['event_index']]
    event_id, _, _, event_date, event_time, _, qr_path, payment_link, _, _ = event

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO registrations (user_id, event_id, child_id) VALUES (?, ?, ?)",
                    (user_id, event_id, child_id))
        registration_id = cur.lastrowid

    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f'<a href="{payment_link}">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n'
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    qr_file = FSInputFile(qr_path)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—á—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])

    await message.answer_photo(photo=qr_file, caption=caption, parse_mode="HTML", reply_markup=keyboard)
    await state.update_data(user_id=user_id, registration_id=registration_id)
    await state.set_state(RegistrationState.waiting_for_payment_check) #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞

# -- –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ --
@router.callback_query(F.data == "pay_cash")
async def handle_cash_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = callback.from_user

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO payments (registration_id, user_id, payment_type, check_path) VALUES (?, ?, ?, ?)",
                    (data['registration_id'], data['user_id'], "–Ω–∞–ª–∏—á–Ω—ã–º–∏", "CASH"))


    #–≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    await notify_admins_about_registration(
        bot=callback.message.bot,
        admins=ADMINS,
        parent_name=callback.from_user.full_name,
        child_name=data["child_name"],
        birth_date=data["birth_date"],
        comment=data["comment"],
        event_title=data["event_title"],
        event_date=data["event_date"],
        event_time=data["event_time"],
    )

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await callback.answer()
    await state.set_state(RegistrationState.waiting_for_payment_check) #–≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.clear()

# -- –ü–æ–ª—É—á–µ–Ω–∏–µ —á–µ–∫–∞ --
@router.message(RegistrationState.waiting_for_payment_check)
async def handle_payment_check(message: Message, state: FSMContext):
    tg_user = message.from_user
    file = message.photo[-1] if message.photo else message.document
    ext = "jpg" if message.photo else "pdf"

    if not file:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{tg_user.id}_{now_str}.{ext}"
    full_path = os.path.join(CHECKS_DIR, filename)

    await message.bot.download(file.file_id, destination=full_path)
    data = await state.get_data()

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO payments (registration_id, user_id, payment_type, check_path) VALUES (?, ?, ?, ?)",
                    (data['registration_id'], data['user_id'], "–æ–Ω–ª–∞–π–Ω", full_path))
        

    #–≤—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    await notify_admins_about_registration(
        bot=callback.message.bot,
        admins=ADMINS,
        parent_name=callback.from_user.full_name,
        child_name=data["child_name"],
        birth_date=data["birth_date"],
        comment=data["comment"],
        event_title=data["event_title"],
        event_date=data["event_date"],
        event_time=data["event_time"],
    )


    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ!")
    await state.clear()
    

#–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
async def notify_admins_about_registration(
    bot: Bot,
    admins: list[int],
    parent_name: str,
    child_name: str,
    birth_date: str,
    comment: str,
    event_title: str,
    event_date: str,
    event_time: str,
):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    """
    text = (
        f"üì¢ {hbold('–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!')}\n\n"
        f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {parent_name}\n"
        f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_name}\n"
        f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äì'}\n\n"
        f"üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: {event_title}\n"
        f"üìÖ –î–∞—Ç–∞: {event_date}\n"
        f"üïí –í—Ä–µ–º—è: {event_time}"
    )

    for admin_id in admins:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")





