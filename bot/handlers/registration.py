from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from bot.states.registration import RegistrationState
from bot.services.events import get_all_events




import os
import datetime
import sys
from pathlib import Path
sys.path.append(str((Path(__file__).resolve().parent.parent)))
from config import CHECKS_DIR, ADMINS
from config import DB_PATH


import sqlite3
from config import DB_PATH

def get_or_create_user(telegram_id: int, username=None, full_name=None,
                       child_name=None, comment=None, child_age=None) -> int:
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
        row = cur.fetchone()
        if row:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–±–µ–Ω–∫–∞, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–¥–∞–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É—è COALESCE, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ)
            cur.execute("""
                UPDATE users 
                SET child_name = CASE WHEN ? != '' THEN ? ELSE child_name END,
                    comment = CASE WHEN ? != '' THEN ? ELSE comment END,
                    child_age = CASE WHEN ? IS NOT NULL THEN ? ELSE child_age END
                WHERE telegram_id = ?
            """, (child_name, child_name, comment, comment, child_age, child_age, telegram_id))
            conn.commit()
            return row[0]
        else:
            cur.execute("""
                INSERT INTO users (telegram_id, username, full_name, child_name, comment, child_age)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (telegram_id, username or '', full_name or '', child_name or '', comment or '', child_age))
            conn.commit()
            return cur.lastrowid


router = Router()

# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
@router.callback_query(lambda c: c.data and c.data.startswith("signup_"))
async def handle_register(callback: CallbackQuery, state: FSMContext):
    event_index = int(callback.data.split("_")[1])
    user = callback.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Å–æ–±—ã—Ç–∏—è
    await state.update_data(event_index=event_index)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ telegram_id
    import sqlite3
    from config import DB_PATH

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT r.child_name FROM registrations r
            JOIN users u ON u.id = r.user_id
            WHERE u.telegram_id = ?
            ORDER BY r.id DESC LIMIT 1
        """, (user.id,))
        row = cur.fetchone()

    if row:
        child_name = row[0]
        await state.update_data(child_name=child_name)
        await callback.message.answer(
            f"üëß –†–∞–Ω–µ–µ –≤—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ —Ä–µ–±—ë–Ω–∫–∞ –ø–æ –∏–º–µ–Ω–∏ <b>{child_name}</b>.\n"
            "–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_child"),
                 InlineKeyboardButton(text="‚ùå –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data="enter_new_child")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(RegistrationState.confirming_child)
    else:
        await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å:")
        await state.set_state(RegistrationState.entering_child_name)

@router.callback_query(F.data == "confirm_child")
async def confirm_existing_child(callback: CallbackQuery, state: FSMContext):
    tg_user = callback.from_user

    import sqlite3
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT child_name, comment, child_age FROM users WHERE telegram_id = ?
        """, (tg_user.id,))
        row = cur.fetchone()

    if row:
        child_name, comment, child_age = row
        await state.update_data(child_name=child_name, comment=comment)
        if child_age is None:
            await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:")
            await state.set_state(RegistrationState.entering_child_age)
        else:
            await callback.message.answer(
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? \n–ò–º—è: <b>{child_name}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment or '–ù–µ—Ç'}</code>\n–í–æ–∑—Ä–∞—Å—Ç: {child_age}",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="data_confirm")],
                    [InlineKeyboardButton(text="‚ùå –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="data_reenter")]
                ]),
                parse_mode="HTML"
            )
            await state.set_state(RegistrationState.confirming_child)
    else:
        await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:")
        await state.set_state(RegistrationState.entering_child_name)

    await callback.answer()


@router.message(RegistrationState.entering_child_age)
async def handle_child_age(message: Message, state: FSMContext):
    try:
        child_age = int(message.text.strip())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(child_age=child_age)
    # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –∑–∞–¥–∞–Ω—ã
    data = await state.get_data()
    if not data.get("comment"):
        await message.answer("üìù –£–∫–∞–∂–∏—Ç–µ, –µ—Å—Ç—å –ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞.")
        await state.set_state(RegistrationState.entering_allergy_info)
    else:
        # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ
        await handle_allergy_info(message, state)



@router.callback_query(F.data == "enter_new_child")
async def enter_new_child(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üëß –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ä–µ–±—ë–Ω–∫–∞:")
    await state.set_state(RegistrationState.entering_child_name)
    await callback.answer()


# 2. –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ä–µ–±—ë–Ω–∫–∞ ‚Üí —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –∞–ª–ª–µ—Ä–≥–∏—è—Ö
@router.message(RegistrationState.entering_child_name)
async def handle_child_name(message: Message, state: FSMContext):
    child_name = message.text.strip()
    await state.update_data(child_name=child_name)

    await message.answer("‚ùó –ï—Å—Ç—å –ª–∏ —É —Ä–µ–±—ë–Ω–∫–∞ (–∏–ª–∏ –¥–µ—Ç–µ–π) –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∫–∞–∫–∏–µ-–ª–∏–±–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.")
    await state.set_state(RegistrationState.entering_allergy_info)


# 3. –í–≤–æ–¥ –∞–ª–ª–µ—Ä–≥–∏–π ‚Üí –≤—ã–¥–∞—ë–º –æ–ø–ª–∞—Ç—É –∏ QR
@router.message(RegistrationState.entering_allergy_info)
async def handle_allergy_info(message: Message, state: FSMContext):
    comment = message.text.strip()
    await state.update_data(comment=comment)

    data = await state.get_data()
    event_index = data.get("event_index")
    events = get_all_events()
    event = events[event_index]

    payment_link = event[6]
    qr_path = event[7]


    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f'<a href="{payment_link}">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n'
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    print(f"[DEBUG] qr_path = {qr_path}")

    qr_file = FSInputFile(qr_path)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—á—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])

    await message.answer_photo(
        photo=qr_file,
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RegistrationState.waiting_for_payment_check)

@router.callback_query(F.data == "pay_cash")
async def handle_cash_payment(callback: CallbackQuery, state: FSMContext):
    from config import ADMINS
    import sqlite3

    data = await state.get_data()
    tg_user = callback.from_user
    child_name = data.get("child_name")
    comment = data.get("comment", "")
    event_index = data.get("event_index")
    user_id = get_or_create_user_id(
        tg_user.id,
        username=tg_user.username,
        full_name=tg_user.full_name
    )

    events = get_all_events()
    event = events[event_index]
    event_id = event[0]
    event_date = event[3]
    event_time = event[4]


    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO users (telegram_id, username, full_name) VALUES (?, ?, ?)", (
            tg_user.id, tg_user.username, tg_user.full_name
        ))
        cur.execute("SELECT id FROM users WHERE telegram_id = ?", (tg_user.id,))
        user_id = cur.fetchone()[0]

        cur.execute("""
            INSERT INTO registrations (user_id, event_id, child_name, comment)
            VALUES (?, ?, ?, ?)
        """, (user_id, event_id, child_name, comment))

        registration_id = cur.lastrowid

        # –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–±–µ–∑ —á–µ–∫–∞)
        cur.execute("""
            INSERT INTO payments (registration_id, amount, check_path, created_at)
            VALUES (?, ?, ?, ?)
        """, (registration_id, "500", "CASH", datetime.datetime.now().isoformat()))

        conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMINS:
        
        chat_id=admin_id,
        #from_user = callback.message.from_user
        from_user = callback.from_user
        username = from_user.username
        full_name = from_user.full_name

        if username and full_name:
            user_display = f"@{username} ({full_name})"
        elif username:
            user_display = f"@{username}"
        else:
            user_display = full_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"

        admin_text = (
            f"üì© –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç {user_display}\n"
            f"üëß –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}\n"
            f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_date}\n"
            f"üïí –í—Ä–µ–º—è: {event_time}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–º–∏"
        )
        await callback.bot.send_message(chat_id=admin_id, text=admin_text)
    
        

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å! \n–ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ –º–µ—Å—Ç–µ.")
    await callback.answer()
    await state.clear()


@router.callback_query(F.data == "comment_confirm")
async def confirm_old_comment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    comment = data.get("comment")

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    
    # –ü–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –∫–∞–∫ –±—É–¥—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –µ–≥–æ –≤–≤—ë–ª
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    event_index = data.get("event_index")
    events = get_all_events()
    event = events[event_index]

    payment_link = event[6]
    qr_path = event[7]

    caption = (
        f"–°–ø–∞—Å–∏–±–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
        f'<a href="{payment_link}">–û–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ</a>\n\n'
        f"üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ (—Ñ–æ—Ç–æ) –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )

    qr_file = FSInputFile(qr_path)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üíµ –û–ø–ª–∞—á—É –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data="pay_cash")]
    ])

    await callback.message.answer_photo(
        photo=qr_file,
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )

    await state.set_state(RegistrationState.waiting_for_payment_check)



@router.callback_query(F.data == "comment_reenter")
async def reenter_comment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úçÔ∏è –•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.")
    await state.set_state(RegistrationState.entering_allergy_info)
    await callback.answer()


    
@router.message(RegistrationState.waiting_for_payment_check)
async def handle_payment_check(message: Message, state: FSMContext):
    tg_user = message.from_user

    file = None
    file_ext = None

    if message.photo:
        file = message.photo[-1]
        file_ext = "jpg"
    elif message.document:
        if message.document.mime_type == "application/pdf":
            file = message.document
            file_ext = "pdf"

    if not file:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –∫–∞–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    now_str = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"{tg_user.id}_{now_str}.{file_ext}"
    full_path = os.path.join(CHECKS_DIR, filename)

    await message.bot.download(file.file_id, destination=full_path)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    child_name = data.get("child_name")
    comment = data.get("comment", "")
    event_index = data.get("event_index")

    events = get_all_events()
    event = events[event_index]
    event_id = event[0]
    event_date = event[3]
    event_time = event[4]

    user_id = get_or_create_user(
        tg_user.id,
        username=tg_user.username,
        full_name=tg_user.full_name,
        child_name=data.get("child_name"),
        comment=data.get("comment"),
        child_age=data.get("child_age")
    )

    import sqlite3
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO registrations (user_id, event_id)
            VALUES (?, ?)
        """, (user_id, event_id))
        registration_id = cur.lastrowid

        # –í —Ç–∞–±–ª–∏—Ü—É payments –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É payer_telegram_id
        cur.execute("""
            INSERT INTO payments (registration_id, amount, check_path, created_at, payer_telegram_id)
            VALUES (?, ?, ?, ?, ?)
        """, (registration_id, "500", full_path, datetime.datetime.now().isoformat(), tg_user.id))
        conn.commit()



    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    for admin_id in ADMINS:
        await message.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} (ID: {message.from_user.id})</b>\n"
                f"üëß –ò–º—è —Ä–µ–±—ë–Ω–∫–∞: {child_name}\n"
                f"üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_date}\n"
                f"üïí –í—Ä–µ–º—è: {event_time}\n"
                f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–ù–µ—Ç'}"
            )
        )
        if file_ext == "jpg":
            await message.bot.send_photo(chat_id=admin_id, photo=FSInputFile(full_path))
        elif file_ext == "pdf":
            await message.bot.send_document(chat_id=admin_id, document=FSInputFile(full_path))

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ! üß°")
    await state.clear()

