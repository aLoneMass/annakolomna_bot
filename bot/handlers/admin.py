from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMINS, DB_PATH
import sqlite3

router = Router()

@router.message(Command("admin"))
async def admin_menu(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π", callback_data="show_registrations")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="show_events")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é üë®‚Äçüíº", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "show_registrations")
async def show_registrations(callback: CallbackQuery):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                u.username,
                c.child_name,
                c.comment,
                c.child_age,
                e.date,
                e.time,
                CASE 
                    WHEN p.payment_type = '–Ω–∞–ª–∏—á–Ω—ã–º–∏' THEN '–ù–∞–ª–∏—á–Ω—ã–º–∏'
                    WHEN p.payment_type = '–æ–Ω–ª–∞–π–Ω' THEN '–û–Ω–ª–∞–π–Ω'
                    ELSE '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
                END AS payment_method
            FROM registrations r
            JOIN users u ON u.id = r.user_id
            JOIN children c ON c.id = r.child_id
            JOIN events e ON e.id = r.event_id
            LEFT JOIN payments p ON p.registration_id = r.id
            ORDER BY e.date DESC, e.time DESC
        """)
        rows = cur.fetchall()

    if not rows:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
    for reg in rows:
        username, child, comment, child_age, date, time, payment_method = reg
        text += (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑ username'}\n"
            f"üëß –†–µ–±—ë–Ω–æ–∫: {child} (–≤–æ–∑—Ä–∞—Å—Ç: {child_age or '–Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
            f"üìÖ –î–∞—Ç–∞: {date} {time}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_method}\n\n"
        )
    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "show_events")
async def show_events(callback: CallbackQuery):
    await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
