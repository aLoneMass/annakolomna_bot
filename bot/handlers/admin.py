from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMINS, DB_PATH
import sqlite3
from datetime import datetime
from collections import defaultdict



router = Router()

@router.message(Command("admin"))   #–ø—Ä–æ–≤–µ—Ä–∏–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–æ–º –∏ –≤—ã–≤–µ–¥–µ–º –µ–º—É –∞–¥–º–∏–Ω –º–µ–Ω—é.
async def admin_menu(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_registrations")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="show_events")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", callback_data="show_events")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é üë®‚Äçüíº", reply_markup=keyboard)


@router.callback_query(lambda c: c.data == "show_registrations")
async def show_registrations(callback: CallbackQuery):
    #await callback.answer()
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                e.id,
                e.title,
                u.username,
                c.child_name,
                c.comment,
                c.birth_date,
                e.date,
                e.time,
                CASE 
                    WHEN p.payment_type = '–Ω–∞–ª–∏—á–Ω—ã–º–∏' THEN '–ù–∞–ª–∏—á–Ω—ã–º–∏'
                    WHEN p.payment_type = '–æ–Ω–ª–∞–π–Ω' THEN '–û–Ω–ª–∞–π–Ω'
                    ELSE '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
                END AS payment_method
            FROM registrations r
            JOIN users u ON u.id = r.user_id
            JOIN children c ON c.id = r.child_id
            JOIN events e ON e.id = r.event_id
            LEFT JOIN payments p ON p.registration_id = r.id
            ORDER BY e.date DESC, e.time DESC
        """)
        rows = cur.fetchall()
    
    await callback.answer()

    if not rows:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return


    grouped = defaultdict(list)
    event_info = {}

    for row in rows:
        event_id, event_title, username, child, comment, birth_date, date, time, payment_method = row
        grouped[event_id].append((username, child, comment, birth_date, payment_method))
        event_info[event_id] = (event_title, date, time)

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
    
    for event_id, registrations in grouped.items():
        title, date, time = event_info[event_id]
        text += f"üé® <b>{title}</b>\nüìÖ <i>{date} –≤ {time}</i>\n\n"

        for username, child, comment, birth_date, payment_method in registrations:
            birth_date_str = birth_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            if birth_date:
                try:
                    birth_dt = datetime.strptime(birth_date, "%Y-%m-%d")
                    today = datetime.today()
                    age = today.year - birth_dt.year - ((today.month, today.day) < (birth_dt.month, birth_dt.day))
                    birth_info = f"{birth_date_str} (–≤–æ–∑—Ä–∞—Å—Ç: {age})"
                except:
                    birth_info = birth_date_str
            else:
                birth_info = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑ username'}\n"
                f"üëß –†–µ–±—ë–Ω–æ–∫: {child}\nüéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_info}\n"
                f"üí¨ –ó–∞–º–µ—Ç–∫–∞: {comment or '‚Äî'}\n"
                f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_method}\n\n"
            )

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "show_events")
async def show_events(callback: CallbackQuery):
    await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
