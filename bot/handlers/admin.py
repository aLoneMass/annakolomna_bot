from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from bot.states.admin import AdminCreateEventState
import sqlite3, re
from config import DB_PATH
from config import ADMINS 
from datetime import datetime, date
from bot.services.events import get_past_events

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()
MAX_MESSAGE_LENGTH = 4000  # –∑–∞–ø–∞—Å, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç

@router.message(Command("admin"))   #–ø—Ä–æ–≤–µ—Ä–∏–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–æ–º –∏ –≤—ã–≤–µ–¥–µ–º –µ–º—É –∞–¥–º–∏–Ω –º–µ–Ω—é.
async def admin_menu(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_registrations")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="show_events")],
        [InlineKeyboardButton(text="üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Ñ–æ—Ç–æ", callback_data="send_link")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", callback_data="create_event")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é üë®‚Äçüíº", reply_markup=keyboard)

#–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
template_fields = [
    ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:", AdminCreateEventState.title),
    ("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", AdminCreateEventState.description),
    ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-–∞–Ω–æ–Ω—Å:", AdminCreateEventState.photo),
    ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", AdminCreateEventState.qr),
    ("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç—ã:", AdminCreateEventState.payment_link),
    ("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", AdminCreateEventState.location),
    ("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", AdminCreateEventState.price)
]

@router.callback_query(F.data == "create_event")
async def start_create_template(callback: CallbackQuery, state: FSMContext):
    print(f"[DEBUG create_event]")
    await callback.message.answer(template_fields[0][0])
    await state.set_state(template_fields[0][1])
    await state.update_data(step_index=0)
    await callback.answer()
    print(f"[DEBUG create_event]template_fields[0][1]:{template_fields[0][1]}")
    print(f"await state.get_state: {await state.get_state()}")



@router.message(AdminCreateEventState.event_dates)
async def receive_event_dates(message: Message, state: FSMContext):
    print(f"[DEBUG receive_event_dates] - –º—ã –≤ –Ω–µ–≥–æ –ø–æ–ø–∞–ª–∏ —á–µ—Ä–µ–∑ –≤—ã–∑–æ–≤ —Ä–æ—É—Ç–µ—Ä–∞ - event_dates")
    raw_dates = message.text.split(',')
    print(f"[DEBUG receive_event_dates] —Å—Ç—Ä–æ—á–∫–∏ –¥–∞—Ç raw_dates:{raw_dates}")
    parsed_dates = []
    for d in raw_dates:
        try:
            parsed = datetime.strptime(d.strip(), "%d.%m.%Y").date()
            parsed_dates.append(str(parsed))
            print(f"[DEBUG receive_event_dates] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç dates:{parsed_dates}")
        except ValueError:
            await message.answer(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {d.strip()}")
            print(f"[DEBUG receive_event_dates] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç:{ValueError}")
            return
    await state.update_data(dates=parsed_dates, time_by_date={}, current_date_index=0)
    await state.set_state(AdminCreateEventState.event_times)
    await message.answer(f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è(—è) –Ω–∞—á–∞–ª–∞ (–ß–ß:–ú–ú, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –¥–ª—è {parsed_dates[0]}:")

@router.message(AdminCreateEventState.event_times)
async def receive_event_times(message: Message, state: FSMContext):
    print(f"[DEBUG receive_event_times]")
    data = await state.get_data()
    dates = data["dates"]
    index = data["current_date_index"]
    time_by_date = data.get("time_by_date", {})

    times = [t.strip() for t in message.text.split(',') if re.match(r"^\d{2}:\d{2}$", t.strip())]
    if not times:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    time_by_date[dates[index]] = times
    index += 1
    if index < len(dates):
        await state.update_data(time_by_date=time_by_date, current_date_index=index)
        await message.answer(f"‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è(—è) –Ω–∞—á–∞–ª–∞ –¥–ª—è {dates[index]}:")
    else:
        await state.update_data(time_by_date=time_by_date)
        await state.set_state(AdminCreateEventState.confirm)
        await show_event_confirmation(state, message)

async def show_event_confirmation(state: FSMContext, message: Message):
    print(f"[DEBUG show_event_confirmation]")
    data = await state.get_data()
    print(f"[DEBUG show_event_confirmation] data: {data}")
    text = f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:</b>"
    text += f"\n–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title') or data.get('AdminCreateEventState:title')}"
    text += f"\n–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description') or data.get('AdminCreateEventState:description')}"
    text += f"\n–¶–µ–Ω–∞: {data.get('price')}‚ÇΩ"
    text += f"\n–ê–¥—Ä–µ—Å: {data.get('location') or data.get('AdminCreateEventState:location') }"
    text += f"\n–°—Å—ã–ª–∫–∞ –æ–ø–ª–∞—Ç—ã: {data.get('payment_link') or data.get('AdminCreateEventState:payment_link')}"
    text += f"\n<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
    for date in data['dates']:
        times = ", ".join(data['time_by_date'][date])
        text += f"üìÖ {date}: {times}\n"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_event")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_event")]
    ])
    await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)



# –ü–µ—Ä–µ–º–µ—â—ë–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ —Å–∞–º—ã–π –∫–æ–Ω–µ—Ü
@router.message(StateFilter(
    AdminCreateEventState.title,
    AdminCreateEventState.description,
    AdminCreateEventState.photo,
    AdminCreateEventState.qr,
    AdminCreateEventState.payment_link,
    AdminCreateEventState.location,
    AdminCreateEventState.price
))
async def handle_template_fields(message: Message, state: FSMContext):
    print(f"[DEBUG handle_template_fields] –ø–æ–ø–∞–ª–∏ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞")
    #print(f"[DEBUG FSM state] step_index = {step_index}, state = {current_state.state_name: message.text}")
    print(await state.get_state())
    data = await state.get_data()
    print(f"[DEBUG handle_template_fields] data:{data}")
    if "step_index" not in data:
        print(f"[DEBUG handle_template_fields] –∏–Ω–¥–µ–∫—Å —à–∞–≥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –æ—à–∏–±–∫–∞. –ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    step_index = data.get("step_index", 0)

    if step_index >= len(template_fields):
        print(f"[DEBUG handle_template_fields] step_index >= –∫–æ–ª-–≤—É –ø–æ–ª–µ–π –≤ —à–∞–±–ª–æ–Ω–µ {step_index}")
        return

    field_name, current_state = template_fields[step_index]

    print(f"[DEBUG handle_template_fields] –†–∞—Å–ø–∞–∫–æ–≤–∞–ª–∏ field_name: {field_name}, current_state: {current_state}")
    if current_state in [AdminCreateEventState.photo, AdminCreateEventState.qr]:
        print(f"[DEBUG handle_template_fields] –∑–∞—à–ª–∏ –≤ if current_state in [AdminCreateEventState.photo, AdminCreateEventState.qr]")
        #–ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫

        if not message.photo:
            await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        file_id = message.photo[-1].file_id
        await state.update_data(**{current_state.state: file_id})
    elif current_state == AdminCreateEventState.price:
        print(f"[DEBUG handle_template_fields] —à–∞–≥ .price")
        try:
            price = int(message.text.strip())
            await state.update_data(price=price)
            print(f"[DEBUG handle_template_fields] —à–∞–≥ .price:{price}")
        except ValueError:
            await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
            print(f"[DEBUG handle_template_fields] —à–∞–≥ .price –æ—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è:{ValueError}")
            return
    else:
        print(f"[DEBUG handle_template_fields] –ï—Å–ª–∏ –Ω–µ —Ñ–æ—Ç–æ –∏ –Ω–µ qr, —Ç–æ–æ–±–Ω–æ–≤–∏—Ç—å state.update_data: {message.text}")
        await state.update_data(**{current_state.state: message.text})

    step_index += 1
    print(f"[DEBUG handle_template_fields] –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω–¥–µ–∫—Å+1")
    if step_index < len(template_fields):
        next_prompt, next_state = template_fields[step_index]
        print(f"[DEBUG handle_template_fields] –ü–æ–∫–∞ –∏–Ω–¥–µ–∫—Å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–ª-–≤—É —Å—Ç—Ä–æ–∫ —à–∞–±–ª–æ–Ω–∞: {next_prompt}, {next_state}")
        await message.answer(next_prompt)
        await state.set_state(next_state)
        await state.update_data(step_index=step_index)
    else:
        print(f"[DEBUG handle_template_fields] –∏–Ω–¥–µ–∫—Å >= —Å—Ç—Ä–æ–∫ –≤ —à–∞–±–ª–æ–Ω–µ: —É—Ö–æ–¥–∏–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é event_dates")
        await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É(—ã) –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        await state.set_state(AdminCreateEventState.event_dates)



@router.callback_query(F.data == "confirm_event")
async def confirm_event_save(callback: CallbackQuery, state: FSMContext):
    print(f"[DEBUG confirm_event_save]")
    await save_event_template(state, callback.message)
    await callback.answer()


async def save_event_template(state: FSMContext, message: Message):
    print(f"[DEBUG save_event_template]")
    data = await state.get_data()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    print(f"[DEBUG save_event_template] data: {data}")
    print(f"[DEBUG save_event_template] Message: {message}")


    #AdminCreateEventState:title
    cursor.execute("""
        INSERT INTO event_templates (title, description, photo_path, qr_path, payment_link, location, price)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (
        data.get("title") or data.get("AdminCreateEventState:title"),
        data.get("description") or data.get("AdminCreateEventState:description"),
        data.get("photo") or data.get("AdminCreateEventState:photo"),
        data.get("qr") or data.get("AdminCreateEventState:qr"),
        data.get("payment_link") or data.get("AdminCreateEventState:payment_link"),
        data.get("location") or data.get("AdminCreateEventState:location"),
        data.get("price") or data.get("AdminCreateEventState:price")
    ))
    template_id = cursor.lastrowid

    for date in data["dates"]:
        for time in data["time_by_date"][date]:
            cursor.execute("""
                INSERT INTO events (template_id, date, time)
                VALUES (?, ?, ?)
            """, (template_id, date, time))

    conn.commit()
    conn.close()

    await message.answer("‚úÖ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –∏ –≤—Å–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")
    await state.clear()


#–í—ã–≤–µ–¥–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö    
@router.callback_query(F.data == "show_registrations")
async def show_all_registrations(callback: CallbackQuery):
    print('[DEBUG show_all_registrations]')
    today = date.today().isoformat()

    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()

        # –î–æ—Å—Ç–∞–µ–º –≤—Å—é –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        cur.execute("""
            SELECT
                et.title,           -- –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
                e.date,             -- –î–∞—Ç–∞
                e.time,             -- –í—Ä–µ–º—è
                u.full_name,        -- –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è
                u.username,         -- Username —Ä–æ–¥–∏—Ç–µ–ª—è
                c.child_name,       -- –ò–º—è —Ä–µ–±–µ–Ω–∫–∞
                c.birth_date,       -- –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
                c.comment,          -- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∞–ª–ª–µ—Ä–≥–∏–∏)
                p.payment_type      -- –¢–∏–ø –æ–ø–ª–∞—Ç—ã
            FROM registrations r
            JOIN events e ON r.event_id = e.id
            JOIN event_templates et ON e.template_id = et.id
            JOIN users u ON r.user_id = u.id
            JOIN children c ON r.child_id = c.id
            LEFT JOIN payments p ON r.id = p.registration_id
            WHERE e.date >= ?
            ORDER BY e.date, e.time, et.title
        """, (today,))
        
        rows = cur.fetchall()

    if not rows:
        await callback.message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –Ω–µ—Ç.")
        await callback.answer()
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    output = ""
    last_event = None
    last_datetime = None

    for row in rows:
        title, event_date, event_time, full_name, username, child_name, birth_date, comment, payment_type = row
        #event_header = f"{title}\nüìÖ {event_date} ‚è∞ {event_time}"
        event_key = (title, event_date, event_time)

        # if (title, event_date, event_time) != last_event:
        #     if last_event is not None:
        #         output += "\n"  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
        #     output += f"\n<b>{event_header}</b>\n"
        #     last_event = (title, event_date, event_time)

        if event_key != last_event:
            if last_event is not None:
                output += "\n" + ("‚Äî" * 40) + "\n\n"
            output += (
                f"üé® <b>{title}</b>\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {event_date}   ‚è∞ <b>–í—Ä–µ–º—è:</b> {event_time}\n\n"
            )
            last_event = event_key

        payment_status = payment_type if payment_type else "–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ"
        output += (
            f"üë§ –†–æ–¥–∏—Ç–µ–ª—å: {full_name or '–Ω–µ—Ç –∏–º–µ–Ω–∏'} (@{username or '–Ω–µ—Ç username'})\n"
            f"üë∂ –†–µ–±—ë–Ω–æ–∫: {child_name} (–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date})\n"
            f"üß¥ –ê–ª–ª–µ—Ä–≥–∏–∏: {comment}\n"
            f"üíµ –û–ø–ª–∞—Ç–∞: {payment_status}\n\n"
        )
    for part in split_message(output.strip()):
        await callback.message.answer(part, parse_mode="HTML")
    #await callback.message.answer(output, parse_mode="HTML")
    await callback.answer()


#–§—É–Ω–∫—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ 4–∫ —Å–∏–º–≤–æ–ª–æ–≤.
def split_message(text: str, max_length=MAX_MESSAGE_LENGTH) -> list[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_length, —Å—Ç–∞—Ä–∞—è—Å—å –¥–µ–ª–∏—Ç—å –ø–æ \n\n"""
    parts = []
    while len(text) > max_length:
        split_index = text.rfind("\n\n", 0, max_length)
        if split_index == -1:
            split_index = max_length
        parts.append(text[:split_index].strip())
        text = text[split_index:].strip()
    if text:
        parts.append(text)
    return parts




@router.callback_query(F.data == "send_link")
async def send_link_past_event(callback: CallbackQuery, state: FSMContext):
    events = get_past_events()
    if events == 0:
        return
    (template_id, title, description, price,
            qr_path, payment_link, location, photo_uniq
        ) = events
    
    if not events:
        await callback.message.answer("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        await callback.answer()
        return
    
