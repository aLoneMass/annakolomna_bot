from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMINS, DB_PATH
from aiogram.types import BufferedInputFile
import os
import sqlite3
import re
from datetime import datetime
from collections import defaultdict
#from bot.states.registration import RegistrationState
from aiogram.fsm.context import FSMContext
from bot.states.admin import AdminCreateEventState



router = Router()
PHOTO_DIR = "data/event_photos"


@router.message(Command("admin"))   #–ø—Ä–æ–≤–µ—Ä–∏–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–æ–º –∏ –≤—ã–≤–µ–¥–µ–º –µ–º—É –∞–¥–º–∏–Ω –º–µ–Ω—é.
async def admin_menu(message: Message):
    if message.from_user.id not in ADMINS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="show_registrations")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="show_events")],
        [InlineKeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å", callback_data="create_event")],
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é üë®‚Äçüíº", reply_markup=keyboard)

#–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(lambda c: c.data == "show_registrations")
async def show_registrations(callback: CallbackQuery):
    #await callback.answer()
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                e.id,
                e.title,
                u.username,
                c.child_name,
                c.comment,
                c.birth_date,
                e.date,
                e.time,
                CASE 
                    WHEN p.payment_type = '–Ω–∞–ª–∏—á–Ω—ã–º–∏' THEN '–ù–∞–ª–∏—á–Ω—ã–º–∏'
                    WHEN p.payment_type = '–æ–Ω–ª–∞–π–Ω' THEN '–û–Ω–ª–∞–π–Ω'
                    ELSE '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
                END AS payment_method
            FROM registrations r
            JOIN users u ON u.id = r.user_id
            JOIN children c ON c.id = r.child_id
            JOIN events e ON e.id = r.event_id
            LEFT JOIN payments p ON p.registration_id = r.id
            ORDER BY e.date DESC, e.time DESC
        """)
        rows = cur.fetchall()
    
    await callback.answer()

    if not rows:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return


    grouped = defaultdict(list)
    event_info = {}

    for row in rows:
        event_id, event_title, username, child, comment, birth_date, date, time, payment_method = row
        grouped[event_id].append((username, child, comment, birth_date, payment_method))
        event_info[event_id] = (event_title, date, time)

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π:</b>\n\n"
    
    for event_id, registrations in grouped.items():
        title, date, time = event_info[event_id]
        text += f"üé® <b>{title}</b>\nüìÖ <i>{date} –≤ {time}</i>\n\n"

        for username, child, comment, birth_date, payment_method in registrations:
            birth_date_str = birth_date or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            if birth_date:
                try:
                    birth_dt = datetime.strptime(birth_date, "%Y-%m-%d")
                    today = datetime.today()
                    age = today.year - birth_dt.year - ((today.month, today.day) < (birth_dt.month, birth_dt.day))
                    birth_info = f"{birth_date_str} (–≤–æ–∑—Ä–∞—Å—Ç: {age})"
                except:
                    birth_info = birth_date_str
            else:
                birth_info = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            text += (
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑ username'}\n"
                f"üëß –†–µ–±—ë–Ω–æ–∫: {child}\nüéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_info}\n"
                f"üí¨ –ó–∞–º–µ—Ç–∫–∞: {comment or '‚Äî'}\n"
                f"üí∞ –û–ø–ª–∞—Ç–∞: {payment_method}\n\n"
            )

    await callback.message.answer(text, parse_mode="HTML")


@router.callback_query(lambda c: c.data == "show_events")
async def show_events(callback: CallbackQuery):
    await callback.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    await callback.answer()                 #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –º–æ—Ä–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –±—É–¥—Ç–æ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º—É, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ.



#–¢—É—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data.startswith("create_event"))
async def create_event(callback: CallbackQuery,  estate: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")
    await estate.set_state(AdminCreateEventState.event_name)
    await callback.answer()                 #–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–∞–µ—Ç –º–æ—Ä–≥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, –±—É–¥—Ç–æ –æ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –≥–æ–≤–æ—Ä–∏—Ç —Ç–µ–ª–µ–≥—Ä–∞–º—É, —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ.

@router.message(AdminCreateEventState.event_name)
async def event_name(message:Message, estate:FSMContext):
    await estate.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await estate.set_state("event_description")

@router.message(AdminCreateEventState.event_description)
async def event_description(message:Message, estate:FSMContext):
    await estate.update_data(event_description = message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–∏–ª–∏ –¥–∞—Ç—ã, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    await estate.set_state("event_date")

@router.message(AdminCreateEventState.event_date)
async def event_date(message:Message, estate:FSMContext):
    raw_text = message.text.strip()
    date_strings = [d.strip() for d in raw_text.split(",") if d.strip()]

    parsed_dates = []
    for ds in date_strings:
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –î–î.–ú–ú.–ì–ì –∏ –î–î.–ú–ú.–ì–ì–ì–ì
        if re.match(r"^\d{2}\.\d{2}\.\d{2}(\d{2})?$", ds):
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥
                if len(ds.split(".")[2]) == 2:
                    dt = datetime.strptime(ds, "%d.%m.%y")
                else:
                    dt = datetime.strptime(ds, "%d.%m.%Y")
                parsed_dates.append(dt.date())
            except ValueError:
                await message.answer(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {ds}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        else:
            await message.answer(f"‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {ds}. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await estate.update_data(dates=parsed_dates)
    await data = estate.get_data()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ {data.title}, –¥–∞—Ç–∞: {data.dates[0]}:")
    await estate.set_state("new_event_time")


@router.message(AdminCreateEventState.new_event_time)
async def event_time_input(message: Message, estate: FSMContext):
    data = await estate.get_data()
    title = data.get("title")
    dates = data.get("dates")
    time_by_date = data.get("time_by_date", {})
    current_index = data.get("current_date_index", 0)

    time_strings = [t.strip() for t in message.text.split(",") if re.match(r"^\d{2}:\d{2}$", t.strip())]
    
    if not time_strings:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è(—è) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    current_date = dates[current_index]
    time_by_date[str(current_date)] = time_strings

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    current_index += 1
    if current_index < len(dates):
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
        await estate.update_data(time_by_date=time_by_date, current_date_index=current_index)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ {title}, –¥–∞—Ç–∞: {dates[current_index]}")
    else:
        # –í—Å–µ –¥–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        await estate.update_data(time_by_date=time_by_date)
        await message.answer("‚úÖ –í—Ä–µ–º–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –¥–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n" \
                                "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {title}:")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –≤ –ë–î –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    
    await  estate.set_state("event_price")



@router.message(AdminCreateEventState.event_price)
async def event_price(message: Message, estate: FSMContext):
    try:
        price = int(message.text.strip())
        if price < 0:
            raise ValueError()
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return

    await estate.update_data(price=price)
    await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {price}‚ÇΩ")
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
    await estate.set_state(AdminCreateEventState.event_photo)



@router.message(AdminCreateEventState.event_photo, F.photo)
async def event_photo(message: Message, estate: FSMContext, bot):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    filename = f"event_{message.date.timestamp()}.jpg"
    local_path = os.path.join(PHOTO_DIR, filename)

    # –°–∫–∞—á–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    await bot.download_file(file_path, local_path)

    # –û–±–Ω–æ–≤–∏—Ç—å FSM
    await estate.update_data(photo_path=local_path)
    await message.answer("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã:")
    await estate.set_state(AdminCreateEventState.qr_code)





@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await callback.answer()
